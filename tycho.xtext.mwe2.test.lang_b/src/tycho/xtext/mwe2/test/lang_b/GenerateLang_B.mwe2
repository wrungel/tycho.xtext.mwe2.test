module tycho.xtext.mwe2.test.lang_b.GenerateLang_B

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "lang_b"
var projectName = "tycho.xtext.mwe2.test.lang_b"
// grammarURI has to be platform:/resource as it is not on the classpath
var grammarURI = "platform:/resource/${projectName}/src/tycho/xtext/mwe2/test/lang_b/Lang_B.xtext"
var runtimeProject = "../${projectName}"
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
        // use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
		platformUri = "${runtimeProject}/.."
		registerGenModelFile = "${runtimeProject}/../tycho.xtext.mwe2.test.lang_a/model/generated/Lang_A.genmodel"
        registerGeneratedEPackage = "tycho.xtext.mwe2.test.lang_a.lang_a.Lang_aPackage"
        scanClassPath=true
        
        // add mappings from platform:/resource to classpath:/
    	uriMap = {
    		from = "platform:/resource/${projectName}/src"
    		to = "classpath:/"
    	}
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
    	encoding = encoding
        language = auto-inject {
   			// make sure we use the resourceSet created during standalone setup.
       		forcedResourceSet = theResourceSet

            uri = grammarURI

            fileExtensions = fileExtensions

            // Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}

            // Serializer 2.0 (needs dependency to org.eclipse.xtext.xbase.lib)
            fragment = serializer.SerializerFragment {}
            
            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = fileExtensions
            }

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment {}

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            // fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment auto-inject {}

            // scoping and exporting API
            fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
            fragment = exporting.QualifiedNamesFragment auto-inject {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}

            // formatter API
            fragment = formatting.FormatterFragment auto-inject {}

            // labeling API
            fragment = labeling.LabelProviderFragment auto-inject {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment auto-inject {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

            // provides the necessary bindings for java types integration
            fragment = types.TypesGeneratorFragment {}

            // generates the required bindings only if the grammar inherits from Xbase
            //fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment auto-inject {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = fileExtensions
            }

        }
    }
}
